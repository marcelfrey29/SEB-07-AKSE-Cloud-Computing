# GitLab Documentation
# https://docs.gitlab.com/ee/ci/yaml/

# Stages (executed in the order they are defined: build, test, deploy)
stages:
  - setup
  - build
  - test
  - package
  - verify
  - deploy
  - cleanup

# Variables
variables:
  # GitLab
  # By default, GitLab runs "git clean" after checkout, which deletes all untracked and ignored files...
  # This deletes "cache" and "artifacts" directories, which then cause problems...
  #     - Cache is useless, because the extracted cache is immediately deleted
  #     - Artifacts can't be accessed, because the injected /dist directory is deleted
  GIT_CLEAN_FLAGS: none
  # Terraform
  TF_ROOT: ${CI_PROJECT_DIR}/terraform/workspaces/aws
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/aws-prod
  # Cache
  FRONTEND_CACHE_NODE_MODULES_KEY: "frontend-node-modules-cache"
  FRONTEND_CACHE_NODE_MODULES_PATH: "todo-frontend/node_modules"
  FRONTEND_CACHE_NPM_KEY: "frontend-npm-cache"
  FRONTEND_CACHE_NPM_PATH: "todo-frontend/.npm"
  BACKEND_CACHE_NODE_MODULES_KEY: "backend-node-modules-cache"
  BACKEND_CACHE_NODE_MODULES_PATH: "todo-service/node_modules"
  BACKEND_CACHE_NPM_KEY: "backend-npm-cache"
  BACKEND_CACHE_NPM_PATH: "todo-service/.npm"
  INFRASTRUCTURE_CACHE_TERRAFORM_KEY: "terraform-cache-aws-prod"
  INFRASTRUCTURE_CACHE_TERRAFORM_PATH: ${TF_ROOT}/.terraform
  # Artefacts
  FRONTEND_ARTEFACT_DIST_FOLDER_PATH: "todo-frontend/dist"
  BACKEND_ARTEFACT_DIST_FOLDER_PATH: "todo-service/dist"

# Base Rules (other jobs can extend / inherit from this rule)
.base:
  timeout: 60 minutes

.frontend-base:
  extends: .base
  image: "node:16.13.0-bullseye"
  # Cache only works for directories inside the project!
  # Caching the same directory in different projects can be realized by different cache-keys
  # The cache path has to be relative to the root directory
  cache:
    - key: ${FRONTEND_CACHE_NODE_MODULES_KEY}
      paths:
        - ${FRONTEND_CACHE_NODE_MODULES_PATH}
    - key: ${FRONTEND_CACHE_NPM_KEY}
      paths:
        - ${FRONTEND_CACHE_NPM_PATH}
  before_script:
    - cd todo-frontend
    - npm set timeout=600000
    - echo "Set npm timeout to 10 min."

.backend-base:
  extends: .base
  image: "node:16.13.0-alpine"
  cache:
    - key: ${BACKEND_CACHE_NODE_MODULES_KEY}
      paths:
        - ${BACKEND_CACHE_NODE_MODULES_PATH}
    - key: ${BACKEND_CACHE_NPM_KEY}
      paths:
        - ${BACKEND_CACHE_NPM_PATH}
  before_script:
    - cd todo-service
    - npm set timeout=600000
    - echo "Set npm timeout to 10 min."

.package-base:
  extends: .base
  image: "docker:20.10.10"

.infrastructure-base:
  extends: .base
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  cache:
    - key: ${INFRASTRUCTURE_CACHE_TERRAFORM_KEY}
      paths:
        - ${INFRASTRUCTURE_CACHE_TERRAFORM_PATH}
  before_script:
    - cd $TF_ROOT

# Frontend
Build Frontend:
  extends: .frontend-base
  stage: build
  needs: [ ]
  script:
    - npm ci --cache .npm --prefer-offline
    - echo "Installed Dependencies."
    - npm run generate:dev
    - echo "Build complete."
  # Use artefacts to pass artifacts from one job to another (e.g. the /dist folder).
  # Don't use "cache" for this use case!
  # Artifacts are only passed to the next stage by default, so there is no need to import them then.
  # If the artifact is needed two plus stages later, this does not work.dependencies:
  # In this case, we need to tell GitLab to download the artifacts.dependencies:
  # To do so, we need to specify the 'dependencies' keyword in that later job and reference the job that is generating the artefact.
  # Path are relative to the project root.
  artifacts:
    paths:
      - ${FRONTEND_ARTEFACT_DIST_FOLDER_PATH}
    expire_in: 60 min

Test Frontend:
  extends: .frontend-base
  stage: test
  needs:
    - Build Frontend
  script:
    - npm run test:unit
    - echo "Unit Tests complete."
    - npm run lint:prettier:check
    - echo "Prettier Checks complete."
    - npm run lint:eslint:check
    - echo "ESLint Checks complete."

# TodoService
Build Todo-Service:
  extends: .backend-base
  stage: build
  needs: [ ]
  script:
    - npm ci --cache .npm
    - echo "Installed Dependencies."
    - npm run build
    - echo "Build complete."
  artifacts:
    paths:
      - ${BACKEND_ARTEFACT_DIST_FOLDER_PATH}
    expire_in: 60 min

Test Todo-Service:
  extends: .backend-base
  stage: test
  needs:
    - Build Todo-Service
  script:
    - npm run test:unit
    - echo "Unit Tests complete."
    - npm run lint:prettier:check
    - echo "Prettier Checks complete."
    - npm run lint:eslint:check
    - echo "ESLint Checks complete."

Package Todo-Service:
  extends: .package-base
  stage: package
  needs:
    - Build Todo-Service
    - Test Todo-Service
  # With dependencies, we can define jobs we want to download artifacts from.
  # This is required if the artifacts are not generated in the previous stage.
  # If a job is defines as dependency, it has to be added to 'needs' (needed jobs) as well
  # In this case, we download the artifact from the 'Build Todo-Service' job, which is 2 stages before
  dependencies:
    - Build Todo-Service
  script:
    - echo "TODO..."
    - cd todo-service
    - ls -la
    - cd dist
    - ls -la
    - echo "TODO..."
    - echo "Packaged Todo-Service."
    - echo "TODO..."
    - echo "Uploaded Todo-Service."

# Terraform
Initialize Terraform:
  extends: .infrastructure-base
  stage: setup
  needs: [ ]
  script:
    - gitlab-terraform init
    - echo "Initialized Terraform."

Validate Terraform:
  extends: .infrastructure-base
  stage: test
  needs:
    - Initialize Terraform
  script:
    - gitlab-terraform validate
    - echo "Validated Terraform Code."

Plan Deployment:
  extends: .infrastructure-base
  stage: verify
  needs:
    - Validate Terraform
    - Build Frontend
    - Test Frontend
    - Package Todo-Service
  dependencies:
    - Build Frontend
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
    - pwd
    - cd ..
    - pwd
    - cd ..
    - pwd
    - cd ..
    - pwd
    - ls -la
    - cd todo-frontend
    - pwd
    - ls -la
    - cd dist
    - pwd
    - ls -la
    - cat index.html
    - echo "TODO FRONTEND DONE"
    - cd ../../todo-service
    - ls -la
    - cd dist
    - ls -la
    - echo "TODO SERVICE DONE"
    - echo "Planning for deployment finished."
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

Deployment:
  extends: .infrastructure-base
  stage: deploy
  needs:
    - Build Frontend
    - Plan Deployment
  dependencies:
    - Build Frontend
  script:
    #    - gitlab-terraform apply
    - echo "TODO..."
    - cd ../../../todo-frontend/dist
    - ls -la
    - echo "Deploy complete."
  environment:
    name: production
  #  rules:
  #    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  #      when: manual
#  when: manual

Destroy:
  extends: .infrastructure-base
  stage: cleanup
  script:
    - gitlab-terraform destroy
    - echo "Destroy complete."
  environment:
    name: production
  when: manual
