# GitLab Documentation
# https://docs.gitlab.com/ee/ci/yaml/

# Stages (executed in the order they are defined: build, test, deploy)
stages:
  - setup
  - build
  - test
  - package
  - verify
  - deploy
  - cleanup

# Variables
variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform/workspaces/aws
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/aws-prod

# Base Rules (other jobs can extend / inherit from this rule)
.base:
  timeout: 60 minutes

.frontend-base:
  extends: .base
  image: "node:16-alpine"
  # Cache only works for directories inside the project!
  # Caching the same directory in different projects can be realized by different cache-keys
  # The cache path has to be relative to the root directory
  cache:
    - key: $CI_COMMIT_REF_SLUG-frontend-node-modules-cache
      paths:
        - "todo-frontend/node_modules"
    - key: $CI_COMMIT_REF_SLUG-frontend-npm-cache
      paths:
        - "todo-frontend/.npm"
    - key: frontend-deploy-files
      paths:
        - "todo-frontend/dist"
  before_script:
    - cd todo-frontend

.backend-base:
  extends: .base
  image: "node:16-alpine"
  cache:
    - key: $CI_COMMIT_REF_SLUG-backend-node-modules-cache
      paths:
        - "todo-service/node_modules"
    - key: $CI_COMMIT_REF_SLUG-backend-npm-cache
      paths:
        - "todo-service/.npm"
    - key: backend-deploy-files
      paths:
        - "todo-service/dist"
  before_script:
    - cd todo-service

.package-base:
  extends: .base
  image: "docker"
  cache:
    - key: backend-deploy-files
      paths:
        - "todo-service/dist"

.infrastructure-base:
  extends: .base
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  cache:
    - key: terraform-cache-aws-prod
      paths:
        - $TF_ROOT/.terraform
    - key: frontend-deploy-files
      paths:
        - "todo-frontend/dist"
  before_script:
    - cd $TF_ROOT

# Frontend
Setup Frontend:
  extends: .frontend-base
  stage: setup
  needs: [ ]
  script:
    - npm ci --cache .npm
    - echo "Installed Dependencies."

Build Frontend:
  extends: .frontend-base
  stage: build
  needs:
    - Setup Frontend
  script:
    - npm run generate
    - echo "Build complete."

Test Frontend:
  extends: .frontend-base
  stage: test
  needs:
    - Build Frontend
  script:
    - npm run test
    - echo "Unit Tests complete."
    - npm run lint:check:style
    - echo "Prettier Checks complete."
    - npm run lint:check:js
    - echo "ESLint Checks complete."

# TodoService
Setup Todo Service:
  extends: .backend-base
  stage: setup
  needs: [ ]
  script:
    - npm ci --cache .npm
    - echo "Installed Dependencies."

Build Todo Service:
  extends: .backend-base
  stage: build
  needs:
    - Setup Todo Service
  script:
    - npm run build
    - echo "Build complete."

Test Todo Service:
  extends: .backend-base
  stage: test
  needs:
    - Build Todo Service
  script:
    - npm run test
    - echo "Unit Tests complete."
    - npm run format:verify
    - echo "Prettier Checks complete."

Package Todo Service:
  extends: .package-base
  stage: package
  needs:
    - Test Todo Service
  script:
    - cd todo-service
    - echo "TODO..."
    - echo "Packaged Todo-Service."
    - echo "TODO..."
    - echo "Uploaded Todo-Service."

# Keycloak
Package Keycloak:
  extends: .package-base
  stage: package
  needs: [ ]
  script:
    - cd keycloak
    - echo "TODO..."
    - echo "Packaged Keycloak."
    - echo "TODO..."
    - echo "Uploaded Keycloak."

# Terraform
Initialize Terraform:
  extends: .infrastructure-base
  stage: setup
  needs: [ ]
  script:
    - gitlab-terraform init
    - echo "Initialized Terraform."

Validate Terraform:
  extends: .infrastructure-base
  stage: test
  needs:
    - Initialize Terraform
  script:
    - gitlab-terraform validate
    - echo "Validated Terraform Code."

Plan Deployment:
  extends: .infrastructure-base
  stage: verify
  needs:
    - Validate Terraform
    - Build Frontend
    - Package Todo Service
    - Package Keycloak
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
    - pwd
    - cd ..
    - pwd
    - cd ..
    - pwd
    - cd ..
    - pwd
    - ls -la
    - cd todo-frontend
    - pwd
    - ls -la
    - cd dist
    - pwd
    - ls -la
    - echo "Planning for deployment finished."
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

Deployment:
  extends: .infrastructure-base
  stage: deploy
  needs:
    - Plan Deployment
  script:
    - gitlab-terraform apply
    - cd ../../../todo-frontend/dist
    - ls -la
    - echo "Deploy complete."
  environment:
    name: production
  #  rules:
  #    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  #      when: manual
  when: manual

Destroy:
  extends: .infrastructure-base
  stage: cleanup
  script:
    - gitlab-terraform destroy
    - echo "Destroy complete."
  environment:
    name: production
  when: manual
